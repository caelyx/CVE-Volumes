#!/usr/bin/env python3
"Generate yearly and monthly counts of critical and all vulnerabilities, and store in CSV files."

from collections import defaultdict
from concurrent.futures import process
import gzip
import json
import os


def process_file(filename, criticalsByMonth, totalsByMonth):
    "Process a single JSON file and add to the criticals and totals dictionaries."
    with gzip.open(filename) as f:
        data = json.load(f)

    for item in data["CVE_Items"]:
        month = "-".join(item["publishedDate"].split("T")[0].split("-")[:2])
        totalsByMonth[month] += 1
        try:
            critical = item["impact"]["baseMetricV3"]["cvssV3"]["baseSeverity"] == "CRITICAL"
        except KeyError:
            try:
                critical = item["impact"]["baseMetricV2"]["cvssV2"]["baseScore"] == 10
            except KeyError:
                critical = False
        if critical:
            criticalsByMonth[month] += 1
    return (criticalsByMonth, totalsByMonth)

# Find all the JSON source files
filenames = [os.path.join("data", f) for f in os.listdir("data") if f.endswith(".json.gz")]

criticalsByMonth = defaultdict(int)
totalsByMonth = defaultdict(int)

# Process each file and add to the criticals and totals dictionaries
for filename in filenames:
    (criticalsByMonth, totalsByMonth) = process_file(filename, criticalsByMonth, totalsByMonth)

# Write monthly statistics file
with open("monthly_stats.csv", "w") as f:
    months = [month for month in criticalsByMonth.keys()]
    months.sort()
    for month in months:
        print(month, criticalsByMonth[month], totalsByMonth[month])
        f.write(month + "," + str(criticalsByMonth[month]) + "," + str(totalsByMonth[month]) + "\n")

# Write yearly statistics file
years = set([month[:4] for month in months])
years = sorted(years)

with open("yearly_stats.csv", "w") as f:
    years = set([month[:4] for month in months])
    years = sorted(years)
    for year in years:
        year_criticals = [criticalsByMonth[month] for month in months if month[:4] == year]
        year_total = [totalsByMonth[month] for month in months if month[:4] == year]
        print(year, sum(year_criticals), sum(year_total))
        f.write(year + "," + str(sum(year_criticals)) + "," + str(sum(year_total)) + "\n")
