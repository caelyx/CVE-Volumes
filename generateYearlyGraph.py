#!/usr/bin/env python3
"Generate graph of vulnerabilities published per year, based on yearly_stats.csv."

import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from scipy.stats import linregress

years = []
yearCrit = []
yearTotal = []

with open("yearly_stats.csv") as f:
    for (year, crit, tot) in [line.split(",") for line in f]:
        years.append(int(year))
        yearCrit.append(int(crit))
        yearTotal.append(int(tot))

## Calculate linear regression for the number of critical vulnerabilities per year

x = np.array(years[:-1]).astype(np.int32) # Exclude the last year from the regression, as it's not a full year
y = np.array(yearCrit[:-1]).astype(np.int32)
slope, intercept, r_value, p_value, std_err = linregress(x, y)
print("slope: %f, intercept: %f" % (slope, intercept))
print("R-squared: %f" % r_value ** 2)
predictions = [int(slope * year + intercept) for year in years]

## Yearly graph

df = pd.DataFrame(
    {"Critical CVEs": yearCrit, "Critical trend": predictions, "Total CVEs": yearTotal}, index=years
)

# Plot the totals as a bar chart
fig, ax = df[["Critical CVEs", "Total CVEs"]].plot.bar(
    title="Critical CVEs published each year",
    color={"Total CVEs": "grey", "Critical CVEs": "darkred"},
    secondary_y="Total CVEs",
)

# Add the critical trend as a line chart
df.plot(y="Critical trend", ax=ax, use_index=False, color="darkred", linestyle="--")

# Format the y axes with thousands separators
ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter("{x:,.0f}"))
ax.right_ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter("{x:,.0f}"))

# Save to file
fig.get_figure().savefig("yearly_graph.png", dpi=300)
